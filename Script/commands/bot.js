const fs = global.nodemodule["fs-extra"];
const axios = require('axios'); // For weather API
const moment = require("moment-timezone");

module.exports.config = {
  name: "Obot",
  version: "3.0.0",
  hasPermssion: 0,
  credits: "OMOR TE, DEEPSEEK",
  description: "Advanced Interactive Assistant Bot",
  commandCategory: "Noprefix",
  usages: "noprefix",
  cooldowns: 4,
};

module.exports.handleEvent = async function({ api, event, args, Threads, Users }) {
  const { threadID, messageID } = event;
  const id = event.senderID;
  const name = await Users.getNameUser(id);
  const input = event.body.toLowerCase().trim();

  // Enhanced responses array with better emojis
  const greetings = [
    `${name}, ржЖржорж┐ ржЖржкржирж╛рж░ ржЬржирзНржп ржХрж┐ржнрж╛ржмрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐? тЬи`,
    `рж╣рзНржпрж╛рж▓рзЛ ${name}! ржХрзЗржоржи ржЖржЫрзЗржи ржЖржЬ? ЁЯМ╕`,
    `${name}, ржЖржкржирж╛рж░ ржЬржирзНржп ржХрж┐ ржХрж░рждрзЗ ржкрж╛рж░рж┐? ЁЯдЧ`,
    `ржЖржкржирж╛рж░ ржХржерж╛ рж╢рзБржиржЫрж┐ ${name}... ржмрж▓рзБржи ЁЯСВ`,
    `${name}, ржЖржЬржХрзЗ ржЖржкржирж╛рж░ ржжрж┐ржиржЯрж┐ ржХрзЗржоржи ржпрж╛ржЪрзНржЫрзЗ? тШАя╕П`,
    `ржЖржорж┐ рж╕ржмрж╕ржорзЯ ржПржЦрж╛ржирзЗ ржЖржЫрж┐ ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ! ЁЯТЦ`,
    `${name}, ржХрж┐ржЫрзБ ржмрж▓рждрзЗ ржЪрж╛ржЪрзНржЫрзЗржи? ЁЯШК`,
    `ржЖржкржирж╛рж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░ржЫрж┐ ${name}... тП│`,
    `${name}, ржЖржкржирж╛рж░ ржжрж┐ржиржЯрж┐ рж╕рзБржирзНржжрж░ рж╣рзЛржХ! ЁЯМИ`,
    `${name}, ржЖржкржирж╛рж░ рж╕рж╛ржерзЗ ржЪрзНржпрж╛ржЯ ржХрж░рждрзЗ ржнрж╛рж▓рзЛ рж▓рж╛ржЧржЫрзЗ! ЁЯШН`
  ];

  // Time/Date Responses (multiple trigger words)
  if (/(рж╕ржоржпрж╝|shomoy|time|ржХржпрж╝ржЯрж╛ ржмрж╛ржЬрзЗ|koyta baje|date|рждрж╛рж░рж┐ржЦ)/.test(input)) {
    const currentTime = moment().tz("Asia/Dhaka").format("hh:mm A, DD/MM/YYYY");
    const timeResponses = [
      `ЁЯХТ ржПржЦржи ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ рж╕ржоржпрж╝: ${currentTime}`,
      `тП░ рж╕ржорзЯ: ${currentTime}`,
      `${name}, рж╕ржорзЯ ржПржЦржи: ${currentTime}`,
      `ЁЯУЕ рждрж╛рж░рж┐ржЦрж╕рж╣ рж╕ржорзЯ: ${currentTime}`
    ];
    return api.sendMessage(timeResponses[Math.floor(Math.random() * timeResponses.length)], threadID);
  }

  // Weather Responses
  if (/(weather|ржЖржмрж╣рж╛ржУржпрж╝рж╛|ржЖржмрж╣рж╛ржУрзЯрж╛)/.test(input)) {
    const location = input.replace(/(weather|ржЖржмрж╣рж╛ржУржпрж╝рж╛|ржЖржмрж╣рж╛ржУрзЯрж╛)/, "").trim();
    if (!location) {
      return api.sendMessage(`ЁЯМдя╕П ${name}, ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржЬрж╛ржирждрзЗ рж╕рзНржерж╛ржирзЗрж░ ржирж╛ржо рж▓рж┐ржЦрзБржиред ржпрзЗржоржи: "weather Dhaka" ржмрж╛ "ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржЪржЯрзНржЯржЧрзНрж░рж╛ржо"`, threadID);
    }
    
    try {
      // This is a placeholder - replace with actual weather API call
      const weatherData = await getWeatherData(location);
      return api.sendMessage(`ЁЯМжя╕П ${name}, ${location}-ржПрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛:\n${weatherData}`, threadID);
    } catch (error) {
      return api.sendMessage(`тЪая╕П ${name}, ржЖржмрж╣рж╛ржУржпрж╝рж╛ рждржерзНржп ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред ржЕржирзНржп рж╕рзНржерж╛ржи ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред`, threadID);
    }
  }

  // How are you responses (multiple variations)
  if (/(how are you|kemon acho|ржХрзЗржоржи ржЖржЫрзЛ|valo acho|ржнрж╛рж▓рзЛ ржЖржЫрзЛ|are you fine)/.test(input)) {
    const wellbeingResponses = [
      `ржЖрж▓рж╣рж╛ржоржжрзБрж▓рж┐рж▓рзНрж▓рж╛рж╣, ржЖржорж┐ ржнрж╛рж▓рзЛ ржЖржЫрж┐ ${name}! ржЖржкржирж╛ржХрзЗ ржжрзЗржЦрзЗ ржнрж╛рж▓рзЛ рж▓рж╛ржЧржЫрзЗ ЁЯШК`,
      `ржЖржорж┐ рж╕ржмрж╕ржорзЯ ржнрж╛рж▓рзЛ ржерж╛ржХрж┐ ${name}, ржХрж╛рж░ржг ржЖржорж╛рж░ ржХрж╛ржЬржЗ рж╣рж▓рзЛ ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рж╛! ЁЯТЦ`,
      `ржзржирзНржпржмрж╛ржж ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рж╛рж░ ржЬржирзНржп ${name}! ржЖржорж┐ ржарж┐ржХ ржЖржЫрж┐, ржЖрж░ ржЖржкржирж┐? ЁЯМ╕`,
      `Alhamdulillah ${name}, рж╕ржмржЗ ржнрж╛рж▓рзЛ! ржЖржкржирж╛рж░ ржжрж┐ржиржЯрж╛ ржХрзЗржоржи ржпрж╛ржЪрзНржЫрзЗ? тШАя╕П`,
      `ржЖржорж┐ ржПржХржЯрж╛ ржмржЯ, ржХрж┐ржирзНрждрзБ рждрзБржорж┐ ржорж╛ржирзБрж╖! рждрзЛржорж╛рж░ ржЦржмрж░ржЯрж╛ ржмрзЗрж╢рж┐ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг! ЁЯШК`
    ];
    return api.sendMessage(wellbeingResponses[Math.floor(Math.random() * wellbeingResponses.length)], threadID);
  }

  // Custom responses for specific phrases
  const responseMap = {
    "miss you": [`${name}, ржЖржорж┐ржУ ржЖржкржирж╛рж░ ржХржерж╛ ржнрж╛ржмржЫрж┐рж▓рж╛ржо! ЁЯТЦ`, `ржЖржкржирж╛ржХрзЗ ржжрзЗржЦрзЗ ржнрж╛рж▓рзЛ рж▓рж╛ржЧржЫрзЗ ${name}! ЁЯШК`],
    "assalamualaikum": ["ржУржпрж╝рж╛рж▓рж╛ржЗржХрзБржо ржЖрж╕рж╕рж╛рж▓рж╛ржо! ЁЯд▓", "ржУржпрж╝рж╛рж▓рж╛ржЗржХрзБржо ржЖрж╕рж╕рж╛рж▓рж╛ржо ржУржпрж╝рж╛ рж░рж╛рж╣ржорж╛рждрзБрж▓рзНрж▓рж╛рж╣! тШкя╕П"],
    "salam": ["ржУржпрж╝рж╛рж▓рж╛ржЗржХрзБржо ржЖрж╕рж╕рж╛рж▓рж╛ржо! ЁЯд▓", "рж╕рж╛рж▓рж╛ржо ржирзЗржУрзЯрж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржж!"],
    "thank you": [`ржЖржкржирж╛ржХрзЗ рж╕рзНржмрж╛ржЧрждржо ${name}! ЁЯШК`, `ржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛ ржирзЗржЗ ${name}! ЁЯШЗ`],
    "thanks": [`ржЖржкржирж╛ржХрзЗ рж╕рзНржмрж╛ржЧрждржо ${name}! ЁЯШК`, `ржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛ ржирзЗржЗ ${name}! ЁЯШЗ`],
    "owner": ["ржПржЗ ржмржЯржЯрж┐ Omor TE ржжрзНржмрж╛рж░рж╛ рждрзИрж░рж┐ рж╣ржпрж╝рзЗржЫрзЗ ЁЯЪА", "ржбрзЗржнрзЗрж▓ржкрж╛рж░: Omor TE ЁЯТ╗"],
    "creator": ["ржПржЗ ржмржЯржЯрж┐ Omor TE ржжрзНржмрж╛рж░рж╛ рждрзИрж░рж┐ рж╣ржпрж╝рзЗржЫрзЗ ЁЯЪА", "ржбрзЗржнрзЗрж▓ржкрж╛рж░: Omor TE ЁЯТ╗"],
    "help": [
      `${name}, ржЖржорж┐ ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐:\n\n` +
      `тАв рж╕ржоржпрж╝/рждрж╛рж░рж┐ржЦ ржЬрж╛ржирж╛рждрзЗ тП░\n` +
      `тАв ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржЬрж╛ржирж╛рждрзЗ ЁЯМжя╕П (weather [location] рж▓рж┐ржЦрзБржи)\n` +
      `тАв рж╕рж╛ржзрж╛рж░ржг рждржерзНржп ЁЯФН\n` +
      `тАв ржЗрж╕рж▓рж╛ржорж┐ржХ рждржерзНржп тШкя╕П\n\n` +
      `ржЖржкржирж┐ ржХрж┐ ржЪрж╛ржи?`
    ],
    "i love you", "love": ["ржзржирзНржпржмрж╛ржж! ржорж╛ржирзБрж╖ ржУ ржкрзНрж░ржпрзБржХрзНрждрж┐рж░ ржоржзрзНржпрзЗ рж╕рзБржирзНржжрж░ рж╕ржорзНржкрж░рзНржХ ржЧржбрж╝рзЗ ржЙржарзБржХ тЭдя╕П", "ржЖржорж┐ржУ ржЖржкржирж╛ржХрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐ ЁЯдЦЁЯй╖"],
    "valobashi": ["ржзржирзНржпржмрж╛ржж! ржорж╛ржирзБрж╖ ржУ ржкрзНрж░ржпрзБржХрзНрждрж┐рж░ ржоржзрзНржпрзЗ рж╕рзБржирзНржжрж░ рж╕ржорзНржкрж░рзНржХ ржЧржбрж╝рзЗ ржЙржарзБржХ тЭдя╕П", "ржЖржорж┐ржУ ржЖржкржирж╛ржХрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐ ЁЯдЦЁЯй╖"]
  };

  // Check if input matches any custom response
  for (const [keyword, responses] of Object.entries(responseMap)) {
    if (input === keyword.toLowerCase()) {
      return api.sendMessage(responses[Math.floor(Math.random() * responses.length)], threadID);
    }
  }

  // General bot trigger
  if (/^(bot|obot|ржмржЯ|robot)/.test(input)) {
    const randomGreeting = greetings[Math.floor(Math.random() * greetings.length)];
    return api.sendMessage(randomGreeting, threadID, messageID);
  }

  // Fallback - don't respond to unrelated messages
};

// Placeholder weather function - replace with real API call
async function getWeatherData(location) {
  // Implement actual weather API integration here
  return `${location}-ржПрж░ ржЬржирзНржп ржЖржмрж╣рж╛ржУржпрж╝рж╛:\nрждрж╛ржкржорж╛рждрзНрж░рж╛: 28┬░C\nржЖржмрж╣рж╛ржУржпрж╝рж╛: рж░рзМржжрзНрж░рзЛржЬрзНржЬрзНржмрж▓`;
}

module.exports.run = function({ api, event, client, __GLOBAL }) { };
